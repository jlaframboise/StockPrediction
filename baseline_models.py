# -*- coding: utf-8 -*-
"""baseline_models.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1zwPEyaZhKn7MIDBcpmUwfPSXypU3azmf
"""

from google.colab import drive
drive.mount('/content/drive')
import sys
sys.path.insert(0,'/content/drive/MyDrive')

!pip install ipynb

from ipynb.fs.full.training_flow import *
from indicators import *
from sklearn.linear_model import LinearRegression
from sklearn.metrics import mean_squared_error
import math

x_train2d=train[['High','Low','Open','Volume']]
x_test2d=test[['High','Low','Open','Volume']]
y_trainlr=train[['Close']]
y_testlr=test[['Close']]
x_test2d.shape
y_testlr.shape

regr = LinearRegression().fit(x_train2d, y_trainlr)
ypred=regr.predict(x_test2d)
plt.scatter(x_test2d['High'], y_testlr,  color='black')
plt.plot(x_test2d['High'], ypred, color='blue', linewidth=1)
plt.scatter(x_test2d['Low'], y_testlr,  color='black')
plt.plot(x_test2d['Low'], ypred, color='red', linewidth=1)
plt.scatter(x_test2d['Open'], y_testlr,  color='black')
plt.plot(x_test2d['Open'], ypred, color='green', linewidth=1)
plt.scatter(x_test2d['Volume'], y_testlr,  color='black')
plt.plot(x_test2d['Volume'], ypred, color='yellow', linewidth=1)

#evaluate_model_rmse(ypred, y_testlr)
rmse=(mean_squared_error(y_testlr, ypred, squared=False))
#mse=mse.reshape(1, 1)
print(rmse)
#true_mse = sc.inverse_transform(ypred)[:, 0]

msetest=(np.mean((regr.predict(x_test2d) - y_testlr)**2))
rmsetest=math.sqrt(msetest)
print("Testing RMSE = {}".format(rmsetest))
msetrain=(np.mean((regr.predict(x_train2d) - y_trainlr)**2))
rmsetrain=math.sqrt(msetrain)
print("Training RMSE = {}".format(rmsetrain))

trainstock=train.loc[dataset['Ticker']=='AAPL']
#trainstock = trainstock.drop([0])
trainstock=trainstock.loc[(trainstock['Open'] !="")]


teststock=test.loc[dataset['Ticker']=='AAPL']

from statsmodels.tsa.arima_model import ARIMA
train_ar=trainstock['Close'].values
test_ar=teststock['Close'].values
trainOpen=trainstock['Open'].values
trainHigh=trainstock['High'].values
trainLow=trainstock['Low'].values
trainVol=trainstock['Volume'].values



history = [x for x in train_ar]
openHist=[x for x in trainOpen]
highHist=[x for x in trainHigh]
lowHist=[x for x in trainLow]
volHist=[x for x in trainVol]

predictions = list()
for t in range(len(test_ar)):
    print(t)
    mod = ARIMA(endog=history,order=(2,1,1))
    #mod = ARIMA(endog=history, exog=(openHist,highHist,lowHist,volHist),order=(2,1,1))
    #mod = ARIMA(endog=history, exog=openHist,order=(2,1,1))
    model_fit = mod.fit()
    #output = model_fit.forecast(exog=np.array(openHist))
    output = model_fit.forecast()
    yhat = output[0]
    predictions.append(yhat)
    obs = test_ar[t]
    history.append(obs)
error = mean_squared_error(test_ar, predictions)
#error=error.reshape(1,-1)
#true_error=sc.inverse_transform(error)[:, 0]
print('Testing Mean Squared Error: %.10f' % error)